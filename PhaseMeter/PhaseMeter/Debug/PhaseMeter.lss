
PhaseMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  0000098c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000999  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068f  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000646  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f6  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001af  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002919  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 31       	cpi	r26, 0x1D	; 29
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  88:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Initialize>:
/************************************************************************/
/* IMPLEMENTATION                                                       */
/************************************************************************/

void Initialize()
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
    unsigned char temp;
    
    /* Initialize channel states */
    channelStateA = ST_START_A;
  9a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <channelStateA>
    channelStateB = ST_START_B;
  9e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <channelStateB>
    channelStateC = ST_START_C;
  a2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <channelStateC>

    curPinStateA = ST_PIN_00_A;
  a6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <curPinStateA>
    curPinStateB = ST_PIN_00_B;
  aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    curPinStateC = ST_PIN_00_C;
  ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <curPinStateC>

    nextPinStateA = ST_PIN_00_A;
  b2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <nextPinStateA>
    nextPinStateB = ST_PIN_00_B;
  b6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <nextPinStateB>
    nextPinStateC = ST_PIN_00_C;
  ba:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <nextPinStateC>

    diffA = 0;
  be:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <diffA+0x1>
  c2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <diffA>
    diffB = 0;
  c6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <diffB+0x1>
  ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <diffB>
    diffC = 0;
  ce:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <diffC+0x1>
  d2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <diffC>
    
    /* Difference values that are ready for output calculations */
    fixedDiffA = 0;
  d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fixedDiffA+0x1>
  da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <fixedDiffA>
    fixedDiffB = 0;
  de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fixedDiffB+0x1>
  e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fixedDiffB>
    fixedDiffC = 0;
  e6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <fixedDiffC+0x1>
  ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <fixedDiffC>

    powerPeriod = 20000; // mks
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	9e e4       	ldi	r25, 0x4E	; 78
  f2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <powerPeriod+0x1>
  f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <powerPeriod>

    /* Enable A,B and C channel pins as inputs */
    DDRC = 0;
  fa:	87 e2       	ldi	r24, 0x27	; 39
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
    
    /* Disable pull-ups */
    PORTC = 0;
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	10 82       	st	Z, r1

    /* Enable toggle interrupts on PC0 -- PC7 (PCINT8..PCINT14) */
    PCICR = (1 << PCIE1);   
 10a:	88 e6       	ldi	r24, 0x68	; 104
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
    PCMSK1 = (1 << PCINT8) | (1 <<PCINT9) | (1 <<PCINT10) | (1 <<PCINT11) | (1 <<PCINT12) | (1 <<PCINT13);
 114:	8c e6       	ldi	r24, 0x6C	; 108
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2f e3       	ldi	r18, 0x3F	; 63
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
        
    /* Set output channel pins as outputs for dA, dB, dC */
    temp = DDRB;
 11e:	84 e2       	ldi	r24, 0x24	; 36
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	89 83       	std	Y+1, r24	; 0x01
    temp |= (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	8e 60       	ori	r24, 0x0E	; 14
 12c:	89 83       	std	Y+1, r24	; 0x01
    DDRB = temp;
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
    /* Clock prescaler CKL/8        */
    /* Operation mode: CTC: WGM=010 */
    /* Interrupt on Compare Match   */
    /********************************/

    TCCR0A = (1 << WGM01);
 138:	84 e4       	ldi	r24, 0x44	; 68
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
    TCCR0B = (1 << CS01);
 142:	85 e4       	ldi	r24, 0x45	; 69
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	22 e0       	ldi	r18, 0x02	; 2
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
    TIMSK0 = (1 << OCIE0A);
 14c:	8e e6       	ldi	r24, 0x6E	; 110
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	22 e0       	ldi	r18, 0x02	; 2
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
    OCR0A = TIMER_PERIOD * 2; // us
 156:	87 e4       	ldi	r24, 0x47	; 71
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	24 e1       	ldi	r18, 0x14	; 20
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
    /* Clock prescaler = 1          */
    /* OC mode: clear on compare    */
    /* PWM: 8 bit, A, B, WGM = 0101 */
    /********************************/

    TCCR1A = (1 << COM1B1) + (1 << COM1A1) + (1 << WGM10);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 ea       	ldi	r18, 0xA1	; 161
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
    TCCR1B = (1 << WGM12) + (1 << CS10);
 16a:	81 e8       	ldi	r24, 0x81	; 129
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 e0       	ldi	r18, 0x09	; 9
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
    TCCR1C = 0;
 174:	82 e8       	ldi	r24, 0x82	; 130
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1

    OCR1A = ZERO_DIFF;    // Channel A: set difference = 0
 17c:	88 e8       	ldi	r24, 0x88	; 136
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	2f e7       	ldi	r18, 0x7F	; 127
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
    OCR1B = ZERO_DIFF;    // Channel B: set difference = 0
 18a:	8a e8       	ldi	r24, 0x8A	; 138
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	31 83       	std	Z+1, r19	; 0x01
 196:	20 83       	st	Z, r18
    /* Clock prescaler = 1          */
    /* OC mode: clear on compare    */
    /* PWM: 8 bit, A,  WGM = 011    */
    /********************************/
    
    TCCR2A = (1 << COM2A1) + (1 << WGM20) + (1 << WGM21);
 198:	80 eb       	ldi	r24, 0xB0	; 176
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	23 e8       	ldi	r18, 0x83	; 131
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
    TCCR2B =  + (1 << CS20);
 1a2:	81 eb       	ldi	r24, 0xB1	; 177
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
   
    OCR2A = ZERO_DIFF;    // Channel C: set difference = 0
 1ac:	83 eb       	ldi	r24, 0xB3	; 179
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
}
 1b6:	00 00       	nop
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <main+0x6>
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
    Initialize();
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <Initialize>
    
    /********************************************/
    /* While power period is constant           */
    /* These 3 strings are out of while(1)      */
    /********************************************/    
    degreeTime = powerPeriod / 360;
 1d0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <powerPeriod>
 1d4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <powerPeriod+0x1>
 1d8:	28 e6       	ldi	r18, 0x68	; 104
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	b9 01       	movw	r22, r18
 1de:	0e 94 21 04 	call	0x842	; 0x842 <__divmodhi4>
 1e2:	cb 01       	movw	r24, r22
 1e4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <degreeTime+0x1>
 1e8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <degreeTime>
    maxDiffTime = MAX_ANGLE * degreeTime;
 1ec:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <degreeTime>
 1f0:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <degreeTime+0x1>
 1f4:	4a e5       	ldi	r20, 0x5A	; 90
 1f6:	42 9f       	mul	r20, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	43 9f       	mul	r20, r19
 1fc:	90 0d       	add	r25, r0
 1fe:	11 24       	eor	r1, r1
 200:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <maxDiffTime+0x1>
 204:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <maxDiffTime>
    maxDiffValue = maxDiffTime / TIMER_PERIOD;
 208:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <maxDiffTime>
 20c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <maxDiffTime+0x1>
 210:	2a e0       	ldi	r18, 0x0A	; 10
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	0e 94 21 04 	call	0x842	; 0x842 <__divmodhi4>
 21a:	cb 01       	movw	r24, r22
 21c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <maxDiffValue+0x1>
 220:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <maxDiffValue>

    sei();
 224:	78 94       	sei

    while (1)
    {        
        if(channelStateA == ST_START_A || channelStateA == ST_WAIT_A)
 226:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <channelStateA>
 22a:	88 23       	and	r24, r24
 22c:	21 f0       	breq	.+8      	; 0x236 <main+0x76>
 22e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <channelStateA>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	59 f5       	brne	.+86     	; 0x28c <main+0xcc>
        {
            outValueA = ( ((long)(fixedDiffA + maxDiffValue)) << 8) / (maxDiffValue << 1);
 236:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <fixedDiffA>
 23a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <fixedDiffA+0x1>
 23e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 242:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 246:	82 0f       	add	r24, r18
 248:	93 1f       	adc	r25, r19
 24a:	09 2e       	mov	r0, r25
 24c:	00 0c       	add	r0, r0
 24e:	aa 0b       	sbc	r26, r26
 250:	bb 0b       	sbc	r27, r27
 252:	ba 2f       	mov	r27, r26
 254:	a9 2f       	mov	r26, r25
 256:	98 2f       	mov	r25, r24
 258:	88 27       	eor	r24, r24
 25a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <maxDiffValue>
 25e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <maxDiffValue+0x1>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	03 2e       	mov	r0, r19
 268:	00 0c       	add	r0, r0
 26a:	44 0b       	sbc	r20, r20
 26c:	55 0b       	sbc	r21, r21
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	0e 94 35 04 	call	0x86a	; 0x86a <__divmodsi4>
 276:	da 01       	movw	r26, r20
 278:	c9 01       	movw	r24, r18
 27a:	89 83       	std	Y+1, r24	; 0x01
            OCR1A = outValueA ;    // Channel A: set difference = 0
 27c:	88 e8       	ldi	r24, 0x88	; 136
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	22 2f       	mov	r18, r18
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	31 83       	std	Z+1, r19	; 0x01
 28a:	20 83       	st	Z, r18
        }            

        if(channelStateB == ST_START_B || channelStateB == ST_WAIT_B)
 28c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <channelStateB>
 290:	88 23       	and	r24, r24
 292:	21 f0       	breq	.+8      	; 0x29c <main+0xdc>
 294:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <channelStateB>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	59 f5       	brne	.+86     	; 0x2f2 <main+0x132>
        {
            outValueB = ( ((long)(fixedDiffB + maxDiffValue)) << 8) / (maxDiffValue << 1);
 29c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <fixedDiffB>
 2a0:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <fixedDiffB+0x1>
 2a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 2a8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	09 2e       	mov	r0, r25
 2b2:	00 0c       	add	r0, r0
 2b4:	aa 0b       	sbc	r26, r26
 2b6:	bb 0b       	sbc	r27, r27
 2b8:	ba 2f       	mov	r27, r26
 2ba:	a9 2f       	mov	r26, r25
 2bc:	98 2f       	mov	r25, r24
 2be:	88 27       	eor	r24, r24
 2c0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <maxDiffValue>
 2c4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <maxDiffValue+0x1>
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	03 2e       	mov	r0, r19
 2ce:	00 0c       	add	r0, r0
 2d0:	44 0b       	sbc	r20, r20
 2d2:	55 0b       	sbc	r21, r21
 2d4:	bc 01       	movw	r22, r24
 2d6:	cd 01       	movw	r24, r26
 2d8:	0e 94 35 04 	call	0x86a	; 0x86a <__divmodsi4>
 2dc:	da 01       	movw	r26, r20
 2de:	c9 01       	movw	r24, r18
 2e0:	8a 83       	std	Y+2, r24	; 0x02
            OCR1B = outValueB;    // Channel B: set difference = 0
 2e2:	8a e8       	ldi	r24, 0x8A	; 138
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	2a 81       	ldd	r18, Y+2	; 0x02
 2e8:	22 2f       	mov	r18, r18
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	31 83       	std	Z+1, r19	; 0x01
 2f0:	20 83       	st	Z, r18
        }            

        if(channelStateC == ST_START_C || channelStateC == ST_WAIT_C)
 2f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channelStateC>
 2f6:	88 23       	and	r24, r24
 2f8:	29 f0       	breq	.+10     	; 0x304 <main+0x144>
 2fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channelStateC>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	09 f0       	breq	.+2      	; 0x304 <main+0x144>
 302:	91 cf       	rjmp	.-222    	; 0x226 <main+0x66>
        {
            outValueC = ( ((long)(fixedDiffC + maxDiffValue)) << 8) / (maxDiffValue << 1);
 304:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <fixedDiffC>
 308:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <fixedDiffC+0x1>
 30c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 310:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 314:	82 0f       	add	r24, r18
 316:	93 1f       	adc	r25, r19
 318:	09 2e       	mov	r0, r25
 31a:	00 0c       	add	r0, r0
 31c:	aa 0b       	sbc	r26, r26
 31e:	bb 0b       	sbc	r27, r27
 320:	ba 2f       	mov	r27, r26
 322:	a9 2f       	mov	r26, r25
 324:	98 2f       	mov	r25, r24
 326:	88 27       	eor	r24, r24
 328:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <maxDiffValue>
 32c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <maxDiffValue+0x1>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	03 2e       	mov	r0, r19
 336:	00 0c       	add	r0, r0
 338:	44 0b       	sbc	r20, r20
 33a:	55 0b       	sbc	r21, r21
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	0e 94 35 04 	call	0x86a	; 0x86a <__divmodsi4>
 344:	da 01       	movw	r26, r20
 346:	c9 01       	movw	r24, r18
 348:	8b 83       	std	Y+3, r24	; 0x03
            OCR2A = outValueC;    // Channel C: set difference = 0
 34a:	83 eb       	ldi	r24, 0xB3	; 179
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	2b 81       	ldd	r18, Y+3	; 0x03
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
        }            
    }
 354:	68 cf       	rjmp	.-304    	; 0x226 <main+0x66>

00000356 <__vector_14>:
/* Measures time for each channel phase difference                      */
/*                                                                      */
/************************************************************************/

ISR(TIMER0_COMPA_vect)
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
    if(channelStateA == ST_MEASURE_PLUS_A)
 36e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <channelStateA>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	51 f4       	brne	.+20     	; 0x38a <__vector_14+0x34>
    {
        diffA++;
 376:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <diffA>
 37a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <diffA+0x1>
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <diffA+0x1>
 384:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <diffA>
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <__vector_14+0x4e>
    }        
    else if(channelStateA == ST_MEASURE_MINUS_A)
 38a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <channelStateA>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	49 f4       	brne	.+18     	; 0x3a4 <__vector_14+0x4e>
    {
        diffA--;
 392:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <diffA>
 396:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <diffA+0x1>
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <diffA+0x1>
 3a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <diffA>
    }

    if(channelStateB == ST_MEASURE_PLUS_B)
 3a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <channelStateB>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	51 f4       	brne	.+20     	; 0x3c0 <__vector_14+0x6a>
    {
        diffB++;
 3ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diffB>
 3b0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <diffB+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <diffB+0x1>
 3ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <diffB>
 3be:	0d c0       	rjmp	.+26     	; 0x3da <__vector_14+0x84>
    }        
    else if(channelStateB == ST_MEASURE_MINUS_B)
 3c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <channelStateB>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	49 f4       	brne	.+18     	; 0x3da <__vector_14+0x84>
    {
        diffB--;
 3c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diffB>
 3cc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <diffB+0x1>
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <diffB+0x1>
 3d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <diffB>
    }
    
    if(channelStateC == ST_MEASURE_PLUS_C)
 3da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channelStateC>
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	51 f4       	brne	.+20     	; 0x3f6 <__vector_14+0xa0>
    {
        diffC++;
 3e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <diffC>
 3e6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <diffC+0x1>
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <diffC+0x1>
 3f0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <diffC>
    else if(channelStateC == ST_MEASURE_MINUS_C)
    {
        diffC--;
    }

}
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    
    if(channelStateC == ST_MEASURE_PLUS_C)
    {
        diffC++;
    }        
    else if(channelStateC == ST_MEASURE_MINUS_C)
 3f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channelStateC>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	49 f4       	brne	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    {
        diffC--;
 3fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <diffC>
 402:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <diffC+0x1>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <diffC+0x1>
 40c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <diffC>
    }

}
 410:	00 00       	nop
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	0f 90       	pop	r0
 41c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_4>:
/* Measures time difference between start edges of the pulses on        */
/* each channel                                                         */
/************************************************************************/

ISR(PCINT1_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	1f 92       	push	r1
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
    unsigned char pinState;
    
    pinState = PINC;
 448:	86 e2       	ldi	r24, 0x26	; 38
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	fc 01       	movw	r30, r24
 44e:	80 81       	ld	r24, Z
 450:	89 83       	std	Y+1, r24	; 0x01
        
    nextPinStateA = (TPinStateA)(pinState & MASK_A);
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	83 70       	andi	r24, 0x03	; 3
 456:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <nextPinStateA>
    nextPinStateB = (TPinStateB)(pinState & MASK_B);
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	8c 70       	andi	r24, 0x0C	; 12
 45e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nextPinStateB>
    nextPinStateC = (TPinStateC)(pinState & MASK_C);
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	80 73       	andi	r24, 0x30	; 48
 466:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <nextPinStateC>
    
    /**********************/
    /* Checking channel A */
    /**********************/
    switch(channelStateA)
 46a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <channelStateA>
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 05       	cpc	r25, r1
 476:	b9 f0       	breq	.+46     	; 0x4a6 <__vector_4+0x80>
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	91 05       	cpc	r25, r1
 47c:	1c f4       	brge	.+6      	; 0x484 <__vector_4+0x5e>
 47e:	89 2b       	or	r24, r25
 480:	29 f0       	breq	.+10     	; 0x48c <__vector_4+0x66>
                curPinStateA = nextPinStateA;
            }
            break;
            
        default:
            break;
 482:	8b c0       	rjmp	.+278    	; 0x59a <__vector_4+0x174>
    nextPinStateC = (TPinStateC)(pinState & MASK_C);
    
    /**********************/
    /* Checking channel A */
    /**********************/
    switch(channelStateA)
 484:	04 97       	sbiw	r24, 0x04	; 4
 486:	0c f0       	brlt	.+2      	; 0x48a <__vector_4+0x64>
 488:	88 c0       	rjmp	.+272    	; 0x59a <__vector_4+0x174>
 48a:	36 c0       	rjmp	.+108    	; 0x4f8 <__vector_4+0xd2>
    {   
        case ST_START_A:    
        /* Searching for initial state */
            if(nextPinStateA == ST_PIN_00_A)
 48c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 490:	88 23       	and	r24, r24
 492:	09 f0       	breq	.+2      	; 0x496 <__vector_4+0x70>
 494:	84 c0       	rjmp	.+264    	; 0x59e <__vector_4+0x178>
            {
                channelStateA = ST_WAIT_A;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <channelStateA>
                curPinStateA = nextPinStateA;
 49c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 4a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <curPinStateA>
            }
        break;
 4a4:	7c c0       	rjmp	.+248    	; 0x59e <__vector_4+0x178>
            
        case ST_WAIT_A:
            if(nextPinStateA != curPinStateA)
 4a6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <nextPinStateA>
 4aa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <curPinStateA>
 4ae:	98 17       	cp	r25, r24
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <__vector_4+0x8e>
 4b2:	77 c0       	rjmp	.+238    	; 0x5a2 <__vector_4+0x17c>
            {
                diffA = 0;
 4b4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <diffA+0x1>
 4b8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <diffA>
                fixedDiffA = 0;
 4bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fixedDiffA+0x1>
 4c0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <fixedDiffA>
                
                switch(nextPinStateA)
 4c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	91 05       	cpc	r25, r1
 4d0:	19 f0       	breq	.+6      	; 0x4d8 <__vector_4+0xb2>
 4d2:	02 97       	sbiw	r24, 0x02	; 2
 4d4:	29 f0       	breq	.+10     	; 0x4e0 <__vector_4+0xba>
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__vector_4+0xc2>
                {
                    case ST_PIN_01_A:
                        channelStateA = ST_MEASURE_MINUS_A;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <channelStateA>
                        break;
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__vector_4+0xc8>
                            
                    case ST_PIN_10_A:
                        channelStateA = ST_MEASURE_PLUS_A;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <channelStateA>
                        break;
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__vector_4+0xc8>
                            
                    case ST_PIN_11_A:
                    default:
                        channelStateA = ST_START_A;
 4e8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <channelStateA>
                        break;
 4ec:	00 00       	nop

                }                        

                curPinStateA = nextPinStateA;
 4ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 4f2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <curPinStateA>
            }
            break;
 4f6:	55 c0       	rjmp	.+170    	; 0x5a2 <__vector_4+0x17c>
            
        case ST_MEASURE_PLUS_A:
        case ST_MEASURE_MINUS_A:
            if(nextPinStateA != curPinStateA)
 4f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <nextPinStateA>
 4fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <curPinStateA>
 500:	98 17       	cp	r25, r24
 502:	09 f4       	brne	.+2      	; 0x506 <__vector_4+0xe0>
 504:	50 c0       	rjmp	.+160    	; 0x5a6 <__vector_4+0x180>
            {   /* Switching to next state */
                channelStateA = ST_START_A;
 506:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <channelStateA>

                if(nextPinStateA == ST_PIN_11_A)
 50a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	b9 f5       	brne	.+110    	; 0x580 <__vector_4+0x15a>
                {
                    if(diffA >= maxDiffValue)
 512:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <diffA>
 516:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <diffA+0x1>
 51a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 51e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 522:	28 17       	cp	r18, r24
 524:	39 07       	cpc	r19, r25
 526:	4c f0       	brlt	.+18     	; 0x53a <__vector_4+0x114>
                    {
                        diffA = maxDiffValue - 1;
 528:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 52c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <diffA+0x1>
 536:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <diffA>
                    }

                    if(diffA < (-1* maxDiffValue))
 53a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 53e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 542:	22 27       	eor	r18, r18
 544:	33 27       	eor	r19, r19
 546:	28 1b       	sub	r18, r24
 548:	39 0b       	sbc	r19, r25
 54a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <diffA>
 54e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <diffA+0x1>
 552:	82 17       	cp	r24, r18
 554:	93 07       	cpc	r25, r19
 556:	5c f4       	brge	.+22     	; 0x56e <__vector_4+0x148>
                    {
                        diffA = (-1* maxDiffValue);
 558:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 55c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 560:	91 95       	neg	r25
 562:	81 95       	neg	r24
 564:	91 09       	sbc	r25, r1
 566:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <diffA+0x1>
 56a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <diffA>
                    }
            
                    fixedDiffA = diffA;
 56e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <diffA>
 572:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <diffA+0x1>
 576:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fixedDiffA+0x1>
 57a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fixedDiffA>
 57e:	08 c0       	rjmp	.+16     	; 0x590 <__vector_4+0x16a>
                }
                else
                {
                    diffA = 0;
 580:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <diffA+0x1>
 584:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <diffA>
                    fixedDiffA = 0;
 588:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fixedDiffA+0x1>
 58c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <fixedDiffA>
                }                        

                curPinStateA = nextPinStateA;
 590:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nextPinStateA>
 594:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <curPinStateA>
            }
            break;
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <__vector_4+0x180>
            
        default:
            break;
 59a:	00 00       	nop
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__vector_4+0x182>
            if(nextPinStateA == ST_PIN_00_A)
            {
                channelStateA = ST_WAIT_A;
                curPinStateA = nextPinStateA;
            }
        break;
 59e:	00 00       	nop
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__vector_4+0x182>

                }                        

                curPinStateA = nextPinStateA;
            }
            break;
 5a2:	00 00       	nop
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__vector_4+0x182>
                    fixedDiffA = 0;
                }                        

                curPinStateA = nextPinStateA;
            }
            break;
 5a6:	00 00       	nop
    }

    /**********************/
    /* Checking channel C */
    /**********************/
    switch(channelStateC)
 5a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channelStateC>
 5ac:	88 2f       	mov	r24, r24
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	91 05       	cpc	r25, r1
 5b4:	b9 f0       	breq	.+46     	; 0x5e4 <__vector_4+0x1be>
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	91 05       	cpc	r25, r1
 5ba:	1c f4       	brge	.+6      	; 0x5c2 <__vector_4+0x19c>
 5bc:	89 2b       	or	r24, r25
 5be:	29 f0       	breq	.+10     	; 0x5ca <__vector_4+0x1a4>
            curPinStateC = nextPinStateC;
        }
        break;
        
        default:
        break;
 5c0:	8b c0       	rjmp	.+278    	; 0x6d8 <__vector_4+0x2b2>
    }

    /**********************/
    /* Checking channel C */
    /**********************/
    switch(channelStateC)
 5c2:	04 97       	sbiw	r24, 0x04	; 4
 5c4:	0c f0       	brlt	.+2      	; 0x5c8 <__vector_4+0x1a2>
 5c6:	88 c0       	rjmp	.+272    	; 0x6d8 <__vector_4+0x2b2>
 5c8:	36 c0       	rjmp	.+108    	; 0x636 <__vector_4+0x210>
    {
        case ST_START_C:
        /* Searching for initial state */
        if(nextPinStateC == ST_PIN_00_C)
 5ca:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 5ce:	88 23       	and	r24, r24
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_4+0x1ae>
 5d2:	84 c0       	rjmp	.+264    	; 0x6dc <__vector_4+0x2b6>
        {
            channelStateC = ST_WAIT_C;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <channelStateC>
            curPinStateC = nextPinStateC;
 5da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 5de:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <curPinStateC>
        }
        break;
 5e2:	7c c0       	rjmp	.+248    	; 0x6dc <__vector_4+0x2b6>
        
        case ST_WAIT_C:
        if(nextPinStateC != curPinStateC)
 5e4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <nextPinStateC>
 5e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <curPinStateC>
 5ec:	98 17       	cp	r25, r24
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <__vector_4+0x1cc>
 5f0:	77 c0       	rjmp	.+238    	; 0x6e0 <__vector_4+0x2ba>
        {
            diffC = 0;
 5f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <diffC+0x1>
 5f6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <diffC>
            fixedDiffC = 0;
 5fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <fixedDiffC+0x1>
 5fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <fixedDiffC>
            
            switch(nextPinStateC)
 602:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	80 31       	cpi	r24, 0x10	; 16
 60c:	91 05       	cpc	r25, r1
 60e:	19 f0       	breq	.+6      	; 0x616 <__vector_4+0x1f0>
 610:	80 97       	sbiw	r24, 0x20	; 32
 612:	29 f0       	breq	.+10     	; 0x61e <__vector_4+0x1f8>
 614:	08 c0       	rjmp	.+16     	; 0x626 <__vector_4+0x200>
            {
                case ST_PIN_01_C:
                channelStateC = ST_MEASURE_MINUS_C;
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <channelStateC>
                break;
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__vector_4+0x206>
                
                case ST_PIN_10_C:
                channelStateC = ST_MEASURE_PLUS_C;
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <channelStateC>
                break;
 624:	03 c0       	rjmp	.+6      	; 0x62c <__vector_4+0x206>
                
                case ST_PIN_11_C:
                default:
                channelStateC = ST_START_C;
 626:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <channelStateC>
                break;
 62a:	00 00       	nop

            }

            curPinStateC = nextPinStateC;
 62c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 630:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <curPinStateC>
        }
        break;
 634:	55 c0       	rjmp	.+170    	; 0x6e0 <__vector_4+0x2ba>
        
        case ST_MEASURE_PLUS_C:
        case ST_MEASURE_MINUS_C:
        if(nextPinStateC != curPinStateC)
 636:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <nextPinStateC>
 63a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <curPinStateC>
 63e:	98 17       	cp	r25, r24
 640:	09 f4       	brne	.+2      	; 0x644 <__vector_4+0x21e>
 642:	50 c0       	rjmp	.+160    	; 0x6e4 <__vector_4+0x2be>
        {   /* Switching to next state */
            channelStateC = ST_START_C;
 644:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <channelStateC>

            if(nextPinStateC == ST_PIN_11_C)
 648:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 64c:	80 33       	cpi	r24, 0x30	; 48
 64e:	b9 f5       	brne	.+110    	; 0x6be <__vector_4+0x298>
            {
                if(diffC >= maxDiffValue)
 650:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <diffC>
 654:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <diffC+0x1>
 658:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 65c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 660:	28 17       	cp	r18, r24
 662:	39 07       	cpc	r19, r25
 664:	4c f0       	brlt	.+18     	; 0x678 <__vector_4+0x252>
                {
                    diffC = maxDiffValue -1;
 666:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 66a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <diffC+0x1>
 674:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <diffC>
                }
            
                if(diffC < (-1* maxDiffValue))
 678:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 67c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 680:	22 27       	eor	r18, r18
 682:	33 27       	eor	r19, r19
 684:	28 1b       	sub	r18, r24
 686:	39 0b       	sbc	r19, r25
 688:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <diffC>
 68c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <diffC+0x1>
 690:	82 17       	cp	r24, r18
 692:	93 07       	cpc	r25, r19
 694:	5c f4       	brge	.+22     	; 0x6ac <__vector_4+0x286>
                {
                    diffC = (-1* maxDiffValue);
 696:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 69a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 69e:	91 95       	neg	r25
 6a0:	81 95       	neg	r24
 6a2:	91 09       	sbc	r25, r1
 6a4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <diffC+0x1>
 6a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <diffC>
                }
                
                fixedDiffC = diffC;
 6ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <diffC>
 6b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <diffC+0x1>
 6b4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <fixedDiffC+0x1>
 6b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <fixedDiffC>
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <__vector_4+0x2a8>
            }
            else
            {
                diffC = 0;
 6be:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <diffC+0x1>
 6c2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <diffC>
                fixedDiffC = 0;
 6c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <fixedDiffC+0x1>
 6ca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <fixedDiffC>
            }

            curPinStateC = nextPinStateC;
 6ce:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextPinStateC>
 6d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <curPinStateC>
        }
        break;
 6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <__vector_4+0x2be>
        
        default:
        break;
 6d8:	00 00       	nop
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__vector_4+0x2c0>
        if(nextPinStateC == ST_PIN_00_C)
        {
            channelStateC = ST_WAIT_C;
            curPinStateC = nextPinStateC;
        }
        break;
 6dc:	00 00       	nop
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <__vector_4+0x2c0>

            }

            curPinStateC = nextPinStateC;
        }
        break;
 6e0:	00 00       	nop
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <__vector_4+0x2c0>
                fixedDiffC = 0;
            }

            curPinStateC = nextPinStateC;
        }
        break;
 6e4:	00 00       	nop

    /**********************/
    /* Checking channel B */
    /**********************/
    
    switch(channelStateB)
 6e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <channelStateB>
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	91 05       	cpc	r25, r1
 6f2:	b9 f0       	breq	.+46     	; 0x722 <__vector_4+0x2fc>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	91 05       	cpc	r25, r1
 6f8:	1c f4       	brge	.+6      	; 0x700 <__vector_4+0x2da>
 6fa:	89 2b       	or	r24, r25
 6fc:	29 f0       	breq	.+10     	; 0x708 <__vector_4+0x2e2>
                curPinStateB = nextPinStateB;
            }
            break;
            
        default:
            break;
 6fe:	8a c0       	rjmp	.+276    	; 0x814 <__vector_4+0x3ee>

    /**********************/
    /* Checking channel B */
    /**********************/
    
    switch(channelStateB)
 700:	04 97       	sbiw	r24, 0x04	; 4
 702:	0c f0       	brlt	.+2      	; 0x706 <__vector_4+0x2e0>
 704:	87 c0       	rjmp	.+270    	; 0x814 <__vector_4+0x3ee>
 706:	36 c0       	rjmp	.+108    	; 0x774 <__vector_4+0x34e>
    {   
        case ST_START_B:    
        /* Searching for initial state */
            if(nextPinStateB == ST_PIN_00_B)
 708:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 70c:	88 23       	and	r24, r24
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_4+0x2ec>
 710:	83 c0       	rjmp	.+262    	; 0x818 <__vector_4+0x3f2>
            {
                channelStateB = ST_WAIT_B;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <channelStateB>
                curPinStateB = nextPinStateB;
 718:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 71c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
        break;
 720:	7b c0       	rjmp	.+246    	; 0x818 <__vector_4+0x3f2>
            
        case ST_WAIT_B:
            if(nextPinStateB != curPinStateB)
 722:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <nextPinStateB>
 726:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 72a:	98 17       	cp	r25, r24
 72c:	09 f4       	brne	.+2      	; 0x730 <__vector_4+0x30a>
 72e:	76 c0       	rjmp	.+236    	; 0x81c <__vector_4+0x3f6>
            {
                diffB = 0;
 730:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <diffB+0x1>
 734:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <diffB>
                fixedDiffB = 0;
 738:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fixedDiffB+0x1>
 73c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fixedDiffB>
                
                switch(nextPinStateB)
 740:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 744:	88 2f       	mov	r24, r24
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	84 30       	cpi	r24, 0x04	; 4
 74a:	91 05       	cpc	r25, r1
 74c:	19 f0       	breq	.+6      	; 0x754 <__vector_4+0x32e>
 74e:	08 97       	sbiw	r24, 0x08	; 8
 750:	29 f0       	breq	.+10     	; 0x75c <__vector_4+0x336>
 752:	08 c0       	rjmp	.+16     	; 0x764 <__vector_4+0x33e>
                {
                    case ST_PIN_01_B:
                        channelStateB = ST_MEASURE_MINUS_B;
 754:	83 e0       	ldi	r24, 0x03	; 3
 756:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <channelStateB>
                        break;
 75a:	07 c0       	rjmp	.+14     	; 0x76a <__vector_4+0x344>
                            
                    case ST_PIN_10_B:
                        channelStateB = ST_MEASURE_PLUS_B;
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <channelStateB>
                        break;
 762:	03 c0       	rjmp	.+6      	; 0x76a <__vector_4+0x344>
                            
                    case ST_PIN_11_B:
                    default:
                        channelStateB = ST_START_B;
 764:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <channelStateB>
                        break;
 768:	00 00       	nop

                }                        

                curPinStateB = nextPinStateB;
 76a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 76e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 772:	54 c0       	rjmp	.+168    	; 0x81c <__vector_4+0x3f6>
            
        case ST_MEASURE_PLUS_B:
        case ST_MEASURE_MINUS_B:
            if(nextPinStateB != curPinStateB)
 774:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <nextPinStateB>
 778:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 77c:	98 17       	cp	r25, r24
 77e:	09 f4       	brne	.+2      	; 0x782 <__vector_4+0x35c>
 780:	4f c0       	rjmp	.+158    	; 0x820 <__vector_4+0x3fa>
            {   /* Switching to next state */
                channelStateB = ST_START_B;
 782:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <channelStateB>

                if(nextPinStateB == ST_PIN_11_B)
 786:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 78a:	8c 30       	cpi	r24, 0x0C	; 12
 78c:	b1 f5       	brne	.+108    	; 0x7fa <__vector_4+0x3d4>
                {
                    if(diffB >= maxDiffValue)
 78e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <diffB>
 792:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <diffB+0x1>
 796:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 79a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 79e:	28 17       	cp	r18, r24
 7a0:	39 07       	cpc	r19, r25
 7a2:	44 f0       	brlt	.+16     	; 0x7b4 <__vector_4+0x38e>
                    {
                        diffB = maxDiffValue;
 7a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 7a8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 7ac:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <diffB+0x1>
 7b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <diffB>
                    }

                    if(diffB < (-1* maxDiffValue))
 7b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 7b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 7bc:	22 27       	eor	r18, r18
 7be:	33 27       	eor	r19, r19
 7c0:	28 1b       	sub	r18, r24
 7c2:	39 0b       	sbc	r19, r25
 7c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diffB>
 7c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <diffB+0x1>
 7cc:	82 17       	cp	r24, r18
 7ce:	93 07       	cpc	r25, r19
 7d0:	5c f4       	brge	.+22     	; 0x7e8 <__vector_4+0x3c2>
                    {
                        diffB = (-1* maxDiffValue);
 7d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <maxDiffValue>
 7d6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <maxDiffValue+0x1>
 7da:	91 95       	neg	r25
 7dc:	81 95       	neg	r24
 7de:	91 09       	sbc	r25, r1
 7e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <diffB+0x1>
 7e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <diffB>
                    }

                    fixedDiffB = diffB;
 7e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diffB>
 7ec:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <diffB+0x1>
 7f0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <fixedDiffB+0x1>
 7f4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <fixedDiffB>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <__vector_4+0x3e4>
                }
                else
                {
                    diffB = 0;
 7fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <diffB+0x1>
 7fe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <diffB>
                    fixedDiffB = 0;
 802:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fixedDiffB+0x1>
 806:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fixedDiffB>
                }                        

                curPinStateB = nextPinStateB;
 80a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextPinStateB>
 80e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            }
            break;
 812:	06 c0       	rjmp	.+12     	; 0x820 <__vector_4+0x3fa>
            
        default:
            break;
 814:	00 00       	nop
 816:	05 c0       	rjmp	.+10     	; 0x822 <__vector_4+0x3fc>
            if(nextPinStateB == ST_PIN_00_B)
            {
                channelStateB = ST_WAIT_B;
                curPinStateB = nextPinStateB;
            }
        break;
 818:	00 00       	nop
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__vector_4+0x3fc>

                }                        

                curPinStateB = nextPinStateB;
            }
            break;
 81c:	00 00       	nop
 81e:	01 c0       	rjmp	.+2      	; 0x822 <__vector_4+0x3fc>
                    fixedDiffB = 0;
                }                        

                curPinStateB = nextPinStateB;
            }
            break;
 820:	00 00       	nop
            
        default:
            break;
        
    }
}
 822:	00 00       	nop
 824:	0f 90       	pop	r0
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	3f 91       	pop	r19
 834:	2f 91       	pop	r18
 836:	0f 90       	pop	r0
 838:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__divmodhi4>:
 842:	97 fb       	bst	r25, 7
 844:	07 2e       	mov	r0, r23
 846:	16 f4       	brtc	.+4      	; 0x84c <__divmodhi4+0xa>
 848:	00 94       	com	r0
 84a:	07 d0       	rcall	.+14     	; 0x85a <__divmodhi4_neg1>
 84c:	77 fd       	sbrc	r23, 7
 84e:	09 d0       	rcall	.+18     	; 0x862 <__divmodhi4_neg2>
 850:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__udivmodhi4>
 854:	07 fc       	sbrc	r0, 7
 856:	05 d0       	rcall	.+10     	; 0x862 <__divmodhi4_neg2>
 858:	3e f4       	brtc	.+14     	; 0x868 <__divmodhi4_exit>

0000085a <__divmodhi4_neg1>:
 85a:	90 95       	com	r25
 85c:	81 95       	neg	r24
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__divmodhi4_neg2>:
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255

00000868 <__divmodhi4_exit>:
 868:	08 95       	ret

0000086a <__divmodsi4>:
 86a:	05 2e       	mov	r0, r21
 86c:	97 fb       	bst	r25, 7
 86e:	1e f4       	brtc	.+6      	; 0x876 <__divmodsi4+0xc>
 870:	00 94       	com	r0
 872:	0e 94 4c 04 	call	0x898	; 0x898 <__negsi2>
 876:	57 fd       	sbrc	r21, 7
 878:	07 d0       	rcall	.+14     	; 0x888 <__divmodsi4_neg2>
 87a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
 87e:	07 fc       	sbrc	r0, 7
 880:	03 d0       	rcall	.+6      	; 0x888 <__divmodsi4_neg2>
 882:	4e f4       	brtc	.+18     	; 0x896 <__divmodsi4_exit>
 884:	0c 94 4c 04 	jmp	0x898	; 0x898 <__negsi2>

00000888 <__divmodsi4_neg2>:
 888:	50 95       	com	r21
 88a:	40 95       	com	r20
 88c:	30 95       	com	r19
 88e:	21 95       	neg	r18
 890:	3f 4f       	sbci	r19, 0xFF	; 255
 892:	4f 4f       	sbci	r20, 0xFF	; 255
 894:	5f 4f       	sbci	r21, 0xFF	; 255

00000896 <__divmodsi4_exit>:
 896:	08 95       	ret

00000898 <__negsi2>:
 898:	90 95       	com	r25
 89a:	80 95       	com	r24
 89c:	70 95       	com	r23
 89e:	61 95       	neg	r22
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__udivmodhi4>:
 8a8:	aa 1b       	sub	r26, r26
 8aa:	bb 1b       	sub	r27, r27
 8ac:	51 e1       	ldi	r21, 0x11	; 17
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <__udivmodhi4_ep>

000008b0 <__udivmodhi4_loop>:
 8b0:	aa 1f       	adc	r26, r26
 8b2:	bb 1f       	adc	r27, r27
 8b4:	a6 17       	cp	r26, r22
 8b6:	b7 07       	cpc	r27, r23
 8b8:	10 f0       	brcs	.+4      	; 0x8be <__udivmodhi4_ep>
 8ba:	a6 1b       	sub	r26, r22
 8bc:	b7 0b       	sbc	r27, r23

000008be <__udivmodhi4_ep>:
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	5a 95       	dec	r21
 8c4:	a9 f7       	brne	.-22     	; 0x8b0 <__udivmodhi4_loop>
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	bc 01       	movw	r22, r24
 8cc:	cd 01       	movw	r24, r26
 8ce:	08 95       	ret

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
