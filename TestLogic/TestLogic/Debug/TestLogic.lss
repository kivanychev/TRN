
TestLogic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072f  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000636  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000210  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile int maxDiffTime;   // us
volatile int maxDiffValue;  

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
    unsigned char outValueA;

    fixedDiffA = 690;
  9a:	82 eb       	ldi	r24, 0xB2	; 178
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <fixedDiffA+0x1>
  a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <fixedDiffA>
    /* Replace with your application code */
    while (1) 
    {
        powerPeriod = 20000;
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <powerPeriod+0x1>
  ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <powerPeriod>
        
        degreeTime = powerPeriod / 360;
  b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <powerPeriod>
  b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <powerPeriod+0x1>
  ba:	28 e6       	ldi	r18, 0x68	; 104
  bc:	31 e0       	ldi	r19, 0x01	; 1
  be:	b9 01       	movw	r22, r18
  c0:	0e 94 bc 00 	call	0x178	; 0x178 <__divmodhi4>
  c4:	cb 01       	movw	r24, r22
  c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <degreeTime+0x1>
  ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <degreeTime>
        maxDiffTime = MAX_ANGLE * degreeTime;
  ce:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <degreeTime>
  d2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <degreeTime+0x1>
  d6:	4a e5       	ldi	r20, 0x5A	; 90
  d8:	42 9f       	mul	r20, r18
  da:	c0 01       	movw	r24, r0
  dc:	43 9f       	mul	r20, r19
  de:	90 0d       	add	r25, r0
  e0:	11 24       	eor	r1, r1
  e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <maxDiffTime+0x1>
  e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <maxDiffTime>
        maxDiffValue = maxDiffTime / TIMER_PERIOD;
  ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <maxDiffTime>
  ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <maxDiffTime+0x1>
  f2:	27 e0       	ldi	r18, 0x07	; 7
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	0e 94 bc 00 	call	0x178	; 0x178 <__divmodhi4>
  fc:	cb 01       	movw	r24, r22
  fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <maxDiffValue+0x1>
 102:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <maxDiffValue>

        outValueA = ( ((long)(fixedDiffA + maxDiffValue)) << 8) / (maxDiffValue << 1);
 106:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <fixedDiffA>
 10a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <fixedDiffA+0x1>
 10e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <maxDiffValue>
 112:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <maxDiffValue+0x1>
 116:	82 0f       	add	r24, r18
 118:	93 1f       	adc	r25, r19
 11a:	09 2e       	mov	r0, r25
 11c:	00 0c       	add	r0, r0
 11e:	aa 0b       	sbc	r26, r26
 120:	bb 0b       	sbc	r27, r27
 122:	ba 2f       	mov	r27, r26
 124:	a9 2f       	mov	r26, r25
 126:	98 2f       	mov	r25, r24
 128:	88 27       	eor	r24, r24
 12a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxDiffValue>
 12e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxDiffValue+0x1>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	03 2e       	mov	r0, r19
 138:	00 0c       	add	r0, r0
 13a:	44 0b       	sbc	r20, r20
 13c:	55 0b       	sbc	r21, r21
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divmodsi4>
 146:	da 01       	movw	r26, r20
 148:	c9 01       	movw	r24, r18
 14a:	89 83       	std	Y+1, r24	; 0x01
        
        
        
        if(channelStateA == ST_START_A || channelStateA == ST_WAIT_A)
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 154:	89 2b       	or	r24, r25
 156:	39 f0       	breq	.+14     	; 0x166 <main+0xd6>
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <main+0xd6>
 164:	a0 cf       	rjmp	.-192    	; 0xa6 <main+0x16>
        {
            
            OCR1A = (unsigned char)outValueA ;    // Channel A: set difference = 0
 166:	88 e8       	ldi	r24, 0x88	; 136
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	29 81       	ldd	r18, Y+1	; 0x01
 16c:	22 2f       	mov	r18, r18
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	31 83       	std	Z+1, r19	; 0x01
 174:	20 83       	st	Z, r18
        }

        

    }
 176:	97 cf       	rjmp	.-210    	; 0xa6 <main+0x16>

00000178 <__divmodhi4>:
 178:	97 fb       	bst	r25, 7
 17a:	07 2e       	mov	r0, r23
 17c:	16 f4       	brtc	.+4      	; 0x182 <__divmodhi4+0xa>
 17e:	00 94       	com	r0
 180:	07 d0       	rcall	.+14     	; 0x190 <__divmodhi4_neg1>
 182:	77 fd       	sbrc	r23, 7
 184:	09 d0       	rcall	.+18     	; 0x198 <__divmodhi4_neg2>
 186:	0e 94 ef 00 	call	0x1de	; 0x1de <__udivmodhi4>
 18a:	07 fc       	sbrc	r0, 7
 18c:	05 d0       	rcall	.+10     	; 0x198 <__divmodhi4_neg2>
 18e:	3e f4       	brtc	.+14     	; 0x19e <__divmodhi4_exit>

00000190 <__divmodhi4_neg1>:
 190:	90 95       	com	r25
 192:	81 95       	neg	r24
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	08 95       	ret

00000198 <__divmodhi4_neg2>:
 198:	70 95       	com	r23
 19a:	61 95       	neg	r22
 19c:	7f 4f       	sbci	r23, 0xFF	; 255

0000019e <__divmodhi4_exit>:
 19e:	08 95       	ret

000001a0 <__divmodsi4>:
 1a0:	05 2e       	mov	r0, r21
 1a2:	97 fb       	bst	r25, 7
 1a4:	1e f4       	brtc	.+6      	; 0x1ac <__divmodsi4+0xc>
 1a6:	00 94       	com	r0
 1a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__negsi2>
 1ac:	57 fd       	sbrc	r21, 7
 1ae:	07 d0       	rcall	.+14     	; 0x1be <__divmodsi4_neg2>
 1b0:	0e 94 03 01 	call	0x206	; 0x206 <__udivmodsi4>
 1b4:	07 fc       	sbrc	r0, 7
 1b6:	03 d0       	rcall	.+6      	; 0x1be <__divmodsi4_neg2>
 1b8:	4e f4       	brtc	.+18     	; 0x1cc <__divmodsi4_exit>
 1ba:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__negsi2>

000001be <__divmodsi4_neg2>:
 1be:	50 95       	com	r21
 1c0:	40 95       	com	r20
 1c2:	30 95       	com	r19
 1c4:	21 95       	neg	r18
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ca:	5f 4f       	sbci	r21, 0xFF	; 255

000001cc <__divmodsi4_exit>:
 1cc:	08 95       	ret

000001ce <__negsi2>:
 1ce:	90 95       	com	r25
 1d0:	80 95       	com	r24
 1d2:	70 95       	com	r23
 1d4:	61 95       	neg	r22
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	8f 4f       	sbci	r24, 0xFF	; 255
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	08 95       	ret

000001de <__udivmodhi4>:
 1de:	aa 1b       	sub	r26, r26
 1e0:	bb 1b       	sub	r27, r27
 1e2:	51 e1       	ldi	r21, 0x11	; 17
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__udivmodhi4_ep>

000001e6 <__udivmodhi4_loop>:
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	a6 17       	cp	r26, r22
 1ec:	b7 07       	cpc	r27, r23
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <__udivmodhi4_ep>
 1f0:	a6 1b       	sub	r26, r22
 1f2:	b7 0b       	sbc	r27, r23

000001f4 <__udivmodhi4_ep>:
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	5a 95       	dec	r21
 1fa:	a9 f7       	brne	.-22     	; 0x1e6 <__udivmodhi4_loop>
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	08 95       	ret

00000206 <__udivmodsi4>:
 206:	a1 e2       	ldi	r26, 0x21	; 33
 208:	1a 2e       	mov	r1, r26
 20a:	aa 1b       	sub	r26, r26
 20c:	bb 1b       	sub	r27, r27
 20e:	fd 01       	movw	r30, r26
 210:	0d c0       	rjmp	.+26     	; 0x22c <__udivmodsi4_ep>

00000212 <__udivmodsi4_loop>:
 212:	aa 1f       	adc	r26, r26
 214:	bb 1f       	adc	r27, r27
 216:	ee 1f       	adc	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	a2 17       	cp	r26, r18
 21c:	b3 07       	cpc	r27, r19
 21e:	e4 07       	cpc	r30, r20
 220:	f5 07       	cpc	r31, r21
 222:	20 f0       	brcs	.+8      	; 0x22c <__udivmodsi4_ep>
 224:	a2 1b       	sub	r26, r18
 226:	b3 0b       	sbc	r27, r19
 228:	e4 0b       	sbc	r30, r20
 22a:	f5 0b       	sbc	r31, r21

0000022c <__udivmodsi4_ep>:
 22c:	66 1f       	adc	r22, r22
 22e:	77 1f       	adc	r23, r23
 230:	88 1f       	adc	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	1a 94       	dec	r1
 236:	69 f7       	brne	.-38     	; 0x212 <__udivmodsi4_loop>
 238:	60 95       	com	r22
 23a:	70 95       	com	r23
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	9b 01       	movw	r18, r22
 242:	ac 01       	movw	r20, r24
 244:	bd 01       	movw	r22, r26
 246:	cf 01       	movw	r24, r30
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
