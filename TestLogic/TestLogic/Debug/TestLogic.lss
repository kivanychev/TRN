
TestLogic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061c  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/************************************************************************/
/* IMPLEMENTATION                                                       */
/************************************************************************/

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    // Initializing IO ports
    DDRB = (1 << PORTB1) + (1 << PORTB2);
  88:	84 e2       	ldi	r24, 0x24	; 36
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	26 e0       	ldi	r18, 0x06	; 6
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
    PORTB = 0xff;
  92:	85 e2       	ldi	r24, 0x25	; 37
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
    /**********************************/
    /* Initializing ADC:              */
    /* AREF to Vcc, set AD0 channel   */
    /**********************************/
    
    ADMUX = (0<<REFS1) | (1<<REFS0);
  9c:	8c e7       	ldi	r24, 0x7C	; 124
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	20 e4       	ldi	r18, 0x40	; 64
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18

    // Turn on ADC, Single conversion mode, Enable ADC interrupts
    // Set conversion frequency to FCPU/128
    ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a6:	8a e7       	ldi	r24, 0x7A	; 122
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ec       	ldi	r18, 0xCF	; 207
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    /* Clock prescaler = 1024        */
    /* OC mode: clear on compare     */
    /* PWM: 9 bit, A, B, WGM = 0110  */
    /*********************************/

    TCCR1A = (1 << COM1B1) + (1 << COM1B0) + (1 << COM1A1) + (1 << COM1A0) + (1 << WGM11);
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	22 ef       	ldi	r18, 0xF2	; 242
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
    TCCR1B = (1 << WGM12) + (1 << CS12) + (1 << CS10);
  ba:	81 e8       	ldi	r24, 0x81	; 129
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2d e0       	ldi	r18, 0x0D	; 13
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
    TCCR1C = 0;
  c4:	82 e8       	ldi	r24, 0x82	; 130
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1

    OCR1A = OCR_MIDDLE_VALUE;
  cc:	88 e8       	ldi	r24, 0x88	; 136
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e9       	ldi	r18, 0x9C	; 156
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	31 83       	std	Z+1, r19	; 0x01
  d8:	20 83       	st	Z, r18

    sei();
  da:	78 94       	sei
    StartConvAdc();
  dc:	8a e7       	ldi	r24, 0x7A	; 122
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2a e7       	ldi	r18, 0x7A	; 122
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	20 64       	ori	r18, 0x40	; 64
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

    // Checking pressed buttons
    while(1)
    {
    }            
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x6e>

000000f0 <__vector_21>:
/*  Reads ADC data and transfers it to PWM                              */
/*                                                                      */
/************************************************************************/

ISR(ADC_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <__vector_21+0x26>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
    unsigned int adcBuf = ADC;
 11a:	88 e7       	ldi	r24, 0x78	; 120
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	91 81       	ldd	r25, Z+1	; 0x01
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
    
    adcBuf = adcBuf * 10 / 33;
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	9c 01       	movw	r18, r24
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	9c 01       	movw	r18, r24
 140:	af e3       	ldi	r26, 0x3F	; 63
 142:	b8 ef       	ldi	r27, 0xF8	; 248
 144:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__umulhisi3>
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	92 95       	swap	r25
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	89 27       	eor	r24, r25
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	89 27       	eor	r24, r25
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = adcBuf;
 15c:	8a e8       	ldi	r24, 0x8A	; 138
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	29 81       	ldd	r18, Y+1	; 0x01
 162:	3a 81       	ldd	r19, Y+2	; 0x02
 164:	fc 01       	movw	r30, r24
 166:	31 83       	std	Z+1, r19	; 0x01
 168:	20 83       	st	Z, r18
    
    // Restarting AD conversion before exit
    StartConvAdc();
 16a:	8a e7       	ldi	r24, 0x7A	; 122
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2a e7       	ldi	r18, 0x7A	; 122
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	20 81       	ld	r18, Z
 176:	20 64       	ori	r18, 0x40	; 64
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
}
 17c:	00 00       	nop
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__umulhisi3>:
 1a6:	a2 9f       	mul	r26, r18
 1a8:	b0 01       	movw	r22, r0
 1aa:	b3 9f       	mul	r27, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	a3 9f       	mul	r26, r19
 1b0:	70 0d       	add	r23, r0
 1b2:	81 1d       	adc	r24, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	91 1d       	adc	r25, r1
 1b8:	b2 9f       	mul	r27, r18
 1ba:	70 0d       	add	r23, r0
 1bc:	81 1d       	adc	r24, r1
 1be:	11 24       	eor	r1, r1
 1c0:	91 1d       	adc	r25, r1
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
